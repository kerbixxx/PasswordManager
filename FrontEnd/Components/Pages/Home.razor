@page "/"
@using BackEnd.DTOs
@using BackEnd.Entities
@using BackEnd.Interfaces
@using FrontEnd.Components.Shared
@using static MudBlazor.CategoryTypes
@inject HttpClient HttpClient
@inject IDialogService DialogService
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="container">
    <div class="left-side">
        <input type="text" @bind="searchQuery" placeholder="Search..." />
        <button @onclick="FilterCredentials">Apply filter</button>
    </div>
    <div class="right-side">
        <button @onclick="OpenDialogAsync">Add new credential</button>
    </div>
</div>
@if (filteredCredentials == null)
{
    <p><em>Loading...</em></p>
}
else if (!filteredCredentials.Any())
{
    <p>No matching records found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Password</th>
                <th>Date Created</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in filteredCredentials)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>
                        <button @onclick="() => TogglePasswordVisibility(item)">Show/Hide</button>
                        <span> @if(item.IsPasswordVisible) {@item.Password} else {@("********")}</span>
                    </td>
                    <td>@item.CreationTime.ToString("g")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CredentialDto> filteredCredentials;
    private string searchQuery { get; set; } = "";

    private bool showModal = false;

    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<CreateCredentialDialog>("Create credential", options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await FilterCredentials();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await FilterCredentials();
    }

    private async Task FilterCredentials()
    {
        try
        {
            var sortedCredentials = await HttpClient.GetFromJsonAsync<List<CredentialDto>>($"api/credential?name={searchQuery}");
            filteredCredentials = sortedCredentials.OrderByDescending(c => c.CreationTime).ToList();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request exception: {ex.Message}");
        }
        StateHasChanged();
    }

    private void TogglePasswordVisibility(CredentialDto item)
    {
        item.IsPasswordVisible = !item.IsPasswordVisible;
        StateHasChanged(); // Обновляем UI после изменения состояния
    }

}
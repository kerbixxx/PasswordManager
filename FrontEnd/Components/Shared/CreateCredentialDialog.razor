@page "/create-credential"
@using BackEnd.DTOs
@using BackEnd.Enums
@inject HttpClient HttpClient

<MudDialog Title="Create Credential" Modal DialogSize="Large">
    <DialogContent>
        @if (error != "")
        {
            <MudText Class="red-text">@error</MudText>
        }
        <MudTextField Label="Name" @bind-Value="@dto.Name" Variant="Variant.Text" />
        <MudTextField Label="Password" @bind-Value="@dto.Password" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
        <MudRadioGroup Label="Type" @bind-Value="@dto.Type">
            <MudRadio Value="CredentialType.Email">Email</MudRadio>
            <MudRadio Value="CredentialType.Site">Site</MudRadio>
        </MudRadioGroup>
    </DialogContent>
    <DialogActions>
        <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" OnClick="Submit">Create</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    bool isShow;
    private CreateCredentialDto dto { get; set; } = new();

    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    string error = "";

    CredentialType type; 
    private async void Submit() {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/credential", dto);
            if (response.IsSuccessStatusCode)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                error = errorContent;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private void Cancel() => MudDialog.Cancel();
    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
